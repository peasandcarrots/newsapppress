var CANVAS_WIDTH = 480;
	//trying to make it much taller so have more time etc. 320 to 350
	var CANVAS_HEIGHT = 330;
	var FPS = 30;
	
	var divNumber = 3;
	
	//setting this to 75 originally; update when retrieve actual tweetsPushedSoFar
	//no var, so not a local variable
	tweetsAvailable = 75;
	
	var tweetsPushedSoFar = 0;
	
	//var used for calling autoscroll at regular periods
	timeToScroll = 0;
	
	
	batchNumber = 0;
	
	var player = {
	  color: "#00A",
	  x: 50,
	  //changing this as the thing is taller now.  from 270 to 370
	  y: 300,
	  width: 20,
	  height: 30,
	  draw: function() {
	    canvas.fillStyle = this.color;
	    canvas.fillRect(this.x, this.y, this.width, this.height);
	  }
	};
	
	var playerBullets = [];
	
	
	player.shoot = function() {
	  Sound.play("shoot");
	
	  var bulletPosition = this.midpoint();
	
	  playerBullets.push(Bullet({
	    speed: 5,
	    x: bulletPosition.x,
	    y: bulletPosition.y
	  }));
	};
	

	var playerParachutes = [];
	
	//added method to save companies
	player.shootParachute = function() {
	  Sound.play("shoot");
	
	  var parachutePosition = this.midpoint();
	
	  playerParachutes.push(Parachute({
	  speed: 5,
	  x: parachutePosition.x,
	  y: parachutePosition.y
	  }));
	  console.log("parachute sent");
	};
	
	
	
	player.midpoint = function() {
	  return {
	    x: this.x + this.width/2,
	    y: this.y + this.height/2
	  };
	};
	
	
	
	
	
	function Bullet(I) {
	  I.active = true;
	
	  I.xVelocity = 0;
	  I.yVelocity = -I.speed;
	  I.width = 3;
	  I.height = 3;
	  I.color = "#000";
	
	  I.inBounds = function() {
	    return I.x >= 0 && I.x <= CANVAS_WIDTH &&
	      I.y >= 0 && I.y <= CANVAS_HEIGHT;
	  };
	
	  I.draw = function() {
	    canvas.fillStyle = this.color;
	    canvas.fillRect(this.x, this.y, this.width, this.height);
	  };
	  
	  I.update = function() {
	    I.x += I.xVelocity;
	    I.y += I.yVelocity;
	
	    I.active = I.active && I.inBounds();
	  };
	
	  I.explode = function() {
	    this.active = false;
	    // Extra Credit: Add an explosion graphic
	  };
	
	  return I;
	}
	
	 
	
	//parachutes based on bullets
	 function Parachute(P) {
	  P.active = true;
	
	  P.xVelocity = 0;
	  P.yVelocity = -P.speed;
	  P.width = 5;
	  P.height = 5;
	  P.color = "green";
	
	  P.inBounds = function() {
	    return P.x >= 0 && P.x <= CANVAS_WIDTH &&
	      P.y >= 0 && P.y <= CANVAS_HEIGHT;
	  };
	
	  P.draw = function() {
	    canvas.fillStyle = this.color;
	    canvas.fillRect(this.x, this.y, this.width, this.height);
	  };
	  
	  P.update = function() {
	    P.x += P.xVelocity;
	    P.y += P.yVelocity;
	
	    P.active = P.active && P.inBounds();
	  };
	
	  P.attachParachute = function() {
	  
	  // i think this is not appropriate for the parachutes (only for the bullets), since the parachuted invaders should remain active
	    this.active = false;
	    // Extra Credit: Add an explosion graphic
	  };
	
	  return P;
	}
	
	
	
	
	
	
	//compNames= ["myer", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola", "asdf", "dfgh", "rtyu", "ytu", "qwer", "myer", "microsoft", "asdfasdf", "coles", "cocacola" ];
	compNames= ["Are ", "you", "ready", "for ", "the ", "news", "Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news","Are ", "you", "ready", "for ", "the ", "news"];

	//trying with the tweets
	//try with call back
	//getTheShite();
	//alert(tweets);
	
	function setUpCompanies(){
	//compNames = tweets;
	alert("setting up companies");

	alert(compNames);
	
	
	}
	
	compIndex=0;
	shotCompanies = [];
	enemies = [];
	
	
	function Enemy(I) {
	  I = I || {};
	
	  I.active = true;
	  I.age = Math.floor(Math.random() * 128);
	  
	  I.color = "#A2B";
	  
	  
	  I.parachuteAttached = false;
	  //try the text
	  //I.compName = "afdsfa";
	      I.compName = compNames[compIndex];
	  
	  I.x = CANVAS_WIDTH / 4 + Math.random() * CANVAS_WIDTH / 2;
	  I.y = 0;
	  I.xVelocity = 0
	  I.yVelocity = 2;
	
	  I.width = 32;
	  I.height = 32;
	
	  I.inBounds = function() {
	    return I.x >= 0 && I.x <= CANVAS_WIDTH &&
	      I.y >= 0 && I.y <= CANVAS_HEIGHT;
	  };
	
	  I.sprite = Sprite("enemy");
	
	  I.draw = function() {
	  
	  //changing colour etc
	  canvas.fillStyle = "white";

	  canvas.font = "8pt Helvetica";
	    this.sprite.draw(canvas, this.x, this.y);
	    canvas.fillText(I.compName, this.x-60, this.y);
	    
	    if (I.parachuteAttached == true){
	    	canvas.fillText("Parachutted", this.x, this.y-4);
	    }
	    
	  };
	
	  I.update = function() {
	  
	  //trying to get parachutted invaders to go straight down slowly
	  if (I.parachuteAttached == true){
	    	I.xVelocity = 0;
		I.yVelocity = 1;
	    }
	  
	    I.x += I.xVelocity;
	    I.y += I.yVelocity;
	
	    I.xVelocity = 3 * Math.sin(I.age * Math.PI / 64);
	
	    I.age++;
	
	    I.active = I.active && I.inBounds();
	  };
	
	  I.explode = function() {
	    Sound.play("explosion");
	
	    this.active = false;
	    // Extra Credit: Add an explosion graphic
	  };
	  
	  I.attachParachute = function() {
	    //Sound.play("explosion");
	    console.log("another co saved")
	    this.parachuteAttached = true;
	    
	    // Extra Credit: Add an explosion graphic
	  };
	
		compIndex++;
	  return I;
	};
	
	
	
	
	function update() {
	
		//alert("in update");

	if(keydown.shift) {
	    player.shootParachute();
	  }
	
	  if(keydown.ctrl) {
	    player.shoot();
	  }
	
	  if(keydown.left) {
	    player.x -= 5;
	  }
	
	  if(keydown.right) {
	    player.x += 5;
	  }
	
	  player.x = player.x.clamp(0, CANVAS_WIDTH - player.width);
	  
	  playerBullets.forEach(function(bullet) {
	    bullet.update();
	  });
	
		
	  playerBullets = playerBullets.filter(function(bullet) {
	    return bullet.active;
	  });
	  
	  //trying for para
	 playerParachutes.forEach(function(parachute) {
	    parachute.update();
	  });
	  
	  playerParachutes= playerParachutes.filter(function(parachute) {
	    return parachute.active;
	  });
	  
	  
	  enemies.forEach(function(enemy) {
	    enemy.update();
	  });
	
	  enemies = enemies.filter(function(enemy) {
	    return enemy.active;
	  });
	
	  handleCollisions();
	  handleParachuteContact();

	//changing to slow down a little
	  if(Math.random() < 0.04) {
	    enemies.push(Enemy());
	    tweetsPushedSoFar ++;
	    if (tweetsPushedSoFar >= (tweetsAvailable-15)){
	    //need to fetch more results now
	    
	    
	    console.log("tweets pushed so far" +tweetsPushedSoFar);
	    console.log("tweets availabel" +tweetsAvailable);
	    console.log("about to call get the shit from index");
	    
	    //to see how subsequent lists handled, esp in scrolly. 
	    //mod.  changed from 15 to 50
	    if (batchNumber<=50)	    {
	    getTheShite();
	    }
	    
	    }
	    console.log("tweets pushed so far" +tweetsPushedSoFar);
	  }
	}
	
	
	
	
	function draw() {
	  canvas.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
	  player.draw();
	  
	  playerBullets.forEach(function(bullet) {
	    bullet.draw();
	  });
	
	playerParachutes.forEach(function(parachute) {
	    parachute.draw();
	  });
	  
	  enemies.forEach(function(enemy) {
	    enemy.draw();
	  });
	}
	
	
	
	function collides(a, b) {
	  return a.x < b.x + b.width &&
	    a.x + a.width > b.x &&
	    a.y < b.y + b.height &&
	    a.y + a.height > b.y;
	}
	
	
	//added function for putting company names into list
	function includeCompanyName(compToInclude, shotOrSaved){
	
	if (shotOrSaved == "shot"){
		var thing = $("#shotCompanies");
		//to establish if red or blue button
		var buttonType = "btn-danger";
		
		//for bayesian thing
		category = 'boring';
		
		}
		
	else if (shotOrSaved == "saved")	{
		var thing = $("#savedCompanies");
				//to establish if red or blue button
		var buttonType = "btn-primary";
		//for bayesian thing
		category = 'interesting';

		
		}
		
		divName="container" + divNumber;
		//compAsListItem = "<li>" +compToInclude+"</li>";
		divForCompany = "<div class=\"btn "  + buttonType +    " chartDivs\" id= \"" + divName +"\">" + compToInclude+"</div>";
		//alert(divForCompany);
		

		//thing.prepend(compAsListItem);
		thing.prepend(divForCompany);
		shotCompanies.push(compToInclude);
		//alert(compToInclude);
		bayes.train(compToInclude, category);

		
		//temporarily triggering the drawing of the chart here
		// of course need to change to little charts in the right column etc
		//tryIt();
		//tryLittleCharts(divName, compToInclude);
		divNumber ++;
		return;
	
	}
	
	
	
	//will try to add the top scoring ones in a top scoring div automatically using similar function as includeCompanyName
	function addTopScorers(compToInclude){
	
	
		var thing = $("#third");
		
		//for bayesian thing
		//category = 'boring';
		
		
		
	
		
		divName="container" + divNumber;
		//compAsListItem = "<li>" +compToInclude+"</li>";
		divForCompany = "<div class=\"chartDivs\" id= \"" + divName +"\">" + compToInclude+"</div>";
		//alert(divForCompany);
		

		//thing.prepend(compAsListItem);
		thing.append(divForCompany);
		//shotCompanies.push(compToInclude);
		//alert(compToInclude);
		//bayes.train(compToInclude, category);

		
		//temporarily triggering the drawing of the chart here
		// of course need to change to little charts in the right column etc
		//tryIt();
		//tryLittleCharts(divName, compToInclude);
		divNumber ++;
		return;
	
	}
	
	
		
	
	function handleCollisions() {
	  playerBullets.forEach(function(bullet) {
	    enemies.forEach(function(enemy) {
	      if(collides(bullet, enemy)) {
		enemy.explode();
		//trying to collect shot companies
		console.log(enemy.compName);
		//alert(enemy.toString());
		includeCompanyName(enemy.compName, "shot");
		bullet.active = false;
	      }
	    });
	  });
	
	  enemies.forEach(function(enemy) {
	    if(collides(enemy, player)) {
	      enemy.explode();
	      player.explode();
	    }
	  });
	}
	
	
			//trying same for parachutes
		function handleParachuteContact() {
			playerParachutes.forEach(function(parachute) {
		enemies.forEach(function(enemy) {
		if(collides(parachute, enemy)) {
		enemy.attachParachute();
		//trying to collect shot companies
		console.log(enemy.compName);

		includeCompanyName(enemy.compName, "saved");
		parachute.active = false;
		}
		});
		}); 
		
	  
	}
	
	
	player.explode = function() {
	  this.active = false;// Extra Credit: Add an explosion graphic and then end the game
	};
	
	player.sprite = Sprite("player");
	
	player.draw = function() {
	  this.sprite.draw(canvas, this.x, this.y);
	};
	
	
	
	
	
	var canvasElement = $("<canvas width='" + CANVAS_WIDTH + 
	 "' height='" + CANVAS_HEIGHT + "'></canvas");
	var canvas = canvasElement.get(0).getContext("2d");
	//trying to put in div thing
	forC = $("#forCan");
	//alert(forC);
	canvasElement.appendTo(forC);
	
	
	

	
	
	//this is where the action starts! 
	//adding thing to also call autoscroll every 5 or so seconds
	setInterval(function() {
	//alert("in that set inter");
	  update();
	  draw();
	  timeToScroll ++;
	  
	  //trying to do the bayesian bit here, on offbeat to scrolling
	  if (timeToScroll == 50){
	  
			  
	  // should call the following function (in Scrolly) to colurize each tweet div according to their bayesian score
	  colouriseByBayesianScore();
	  
	  }
	  
	  if (timeToScroll == 100){
	  autoScroll();
	  }
	}, 1000/FPS);
	
	





